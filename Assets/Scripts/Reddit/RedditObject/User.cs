// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Reddit;
//
//    var userMe = UserMe.FromJson(jsonString);

namespace Reddit
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    [Serializable]
    public partial class UserMe
    {
        [JsonProperty("is_employee")]
        public bool IsEmployee ;

        [JsonProperty("seen_layout_switch")]
        public bool SeenLayoutSwitch ;

        [JsonProperty("has_visited_new_profile")]
        public bool HasVisitedNewProfile ;

        [JsonProperty("pref_no_profanity")]
        public bool PrefNoProfanity ;

        [JsonProperty("has_external_account")]
        public bool HasExternalAccount ;

        [JsonProperty("pref_geopopular")]
        public string PrefGeopopular ;

        [JsonProperty("seen_redesign_modal")]
        public bool SeenRedesignModal ;

        [JsonProperty("pref_show_trending")]
        public bool PrefShowTrending ;

        [JsonProperty("subreddit")]
        public Subreddit Subreddit ;

        [JsonProperty("is_sponsor")]
        public bool IsSponsor ;

        [JsonProperty("gold_expiration")]
        public object GoldExpiration ;

        [JsonProperty("has_gold_subscription")]
        public bool HasGoldSubscription ;

        [JsonProperty("num_friends")]
        public long NumFriends ;

        [JsonProperty("features")]
        public Features Features ;

        [JsonProperty("has_android_subscription")]
        public bool HasAndroidSubscription ;

        [JsonProperty("verified")]
        public bool Verified ;

        [JsonProperty("pref_autoplay")]
        public bool PrefAutoplay ;

        [JsonProperty("coins")]
        public long Coins ;

        [JsonProperty("has_paypal_subscription")]
        public bool HasPaypalSubscription ;

        [JsonProperty("has_subscribed_to_premium")]
        public bool HasSubscribedToPremium ;

        [JsonProperty("id")]
        public string Id ;

        [JsonProperty("has_stripe_subscription")]
        public bool HasStripeSubscription ;

        [JsonProperty("seen_premium_adblock_modal")]
        public bool SeenPremiumAdblockModal ;

        [JsonProperty("can_create_subreddit")]
        public bool CanCreateSubreddit ;

        [JsonProperty("over_18")]
        public bool Over18 ;

        [JsonProperty("is_gold")]
        public bool IsGold ;

        [JsonProperty("is_mod")]
        public bool IsMod ;

        [JsonProperty("suspension_expiration_utc")]
        public object SuspensionExpirationUtc ;

        [JsonProperty("has_verified_email")]
        public bool HasVerifiedEmail ;

        [JsonProperty("is_suspended")]
        public bool IsSuspended ;

        [JsonProperty("pref_video_autoplay")]
        public bool PrefVideoAutoplay ;

        [JsonProperty("in_redesign_beta")]
        public bool InRedesignBeta ;

        [JsonProperty("icon_img")]
        public Uri IconImg ;

        [JsonProperty("pref_nightmode")]
        public bool PrefNightmode ;

        [JsonProperty("oauth_client_id")]
        public string OauthClientId ;

        [JsonProperty("hide_from_robots")]
        public bool HideFromRobots ;

        [JsonProperty("link_karma")]
        public long LinkKarma ;

        [JsonProperty("force_password_reset")]
        public bool ForcePasswordReset ;

        [JsonProperty("inbox_count")]
        public long InboxCount ;

        [JsonProperty("pref_top_karma_subreddits")]
        public bool PrefTopKarmaSubreddits ;

        [JsonProperty("pref_show_snoovatar")]
        public bool PrefShowSnoovatar ;

        [JsonProperty("name")]
        public string Name ;

        [JsonProperty("pref_clickgadget")]
        public long PrefClickgadget ;

        [JsonProperty("created")]
        public long Created ;

        [JsonProperty("gold_creddits")]
        public long GoldCreddits ;

        [JsonProperty("created_utc")]
        public long CreatedUtc ;

        [JsonProperty("has_ios_subscription")]
        public bool HasIosSubscription ;

        [JsonProperty("pref_show_twitter")]
        public bool PrefShowTwitter ;

        [JsonProperty("in_beta")]
        public bool InBeta ;

        [JsonProperty("comment_karma")]
        public long CommentKarma ;

        [JsonProperty("has_subscribed")]
        public bool HasSubscribed ;

        [JsonProperty("seen_subreddit_chat_ftux")]
        public bool SeenSubredditChatFtux ;
    }
    [Serializable]
    public partial class Features
    {
        [JsonProperty("chat_subreddit")]
        public bool ChatSubreddit ;

        [JsonProperty("show_amp_link")]
        public bool ShowAmpLink ;

        [JsonProperty("read_from_pref_service")]
        public bool ReadFromPrefService ;

        [JsonProperty("chat_rollout")]
        public bool ChatRollout ;

        [JsonProperty("chat")]
        public bool Chat ;

        [JsonProperty("chat_reddar_reports")]
        public bool ChatReddarReports ;

        [JsonProperty("default_srs_holdout")]
        public DefaultSrsHoldout DefaultSrsHoldout ;

        [JsonProperty("is_email_permission_required")]
        public bool IsEmailPermissionRequired ;

        [JsonProperty("richtext_previews")]
        public bool RichtextPreviews ;

        [JsonProperty("email_verification")]
        public DefaultSrsHoldout EmailVerification ;

        [JsonProperty("mweb_xpromo_modal_listing_click_daily_dismissible_ios")]
        public bool MwebXpromoModalListingClickDailyDismissibleIos ;

        [JsonProperty("community_awards")]
        public bool CommunityAwards ;

        [JsonProperty("dual_write_user_prefs")]
        public bool DualWriteUserPrefs ;

        [JsonProperty("do_not_track")]
        public bool DoNotTrack ;

        [JsonProperty("chat_user_settings")]
        public bool ChatUserSettings ;

        [JsonProperty("mweb_xpromo_interstitial_comments_ios")]
        public bool MwebXpromoInterstitialCommentsIos ;

        [JsonProperty("mweb_link_tab")]
        public DefaultSrsHoldout MwebLinkTab ;

        [JsonProperty("mweb_xpromo_interstitial_comments_android")]
        public bool MwebXpromoInterstitialCommentsAndroid ;

        [JsonProperty("mweb_xpromo_modal_listing_click_daily_dismissible_android")]
        public bool MwebXpromoModalListingClickDailyDismissibleAndroid ;

        [JsonProperty("mweb_sharing_web_share_api")]
        public DefaultSrsHoldout MwebSharingWebShareApi ;

        [JsonProperty("chat_group_rollout")]
        public bool ChatGroupRollout ;

        [JsonProperty("custom_feeds")]
        public bool CustomFeeds ;

        [JsonProperty("spez_modal")]
        public bool SpezModal ;

        [JsonProperty("mweb_sharing_clipboard")]
        public DefaultSrsHoldout MwebSharingClipboard ;
    }
    [Serializable]
    public partial class DefaultSrsHoldout
    {
        [JsonProperty("owner")]
        public string Owner ;

        [JsonProperty("variant")]
        public string Variant ;

        [JsonProperty("experiment_id")]
        public long ExperimentId ;
    }
    [Serializable]
    public partial class Subreddit
    {
        [JsonProperty("default_set")]
        public bool DefaultSet ;

        [JsonProperty("user_is_contributor")]
        public bool UserIsContributor ;

        [JsonProperty("banner_img")]
        public string BannerImg ;

        [JsonProperty("disable_contributor_requests")]
        public bool DisableContributorRequests ;

        [JsonProperty("user_is_banned")]
        public bool UserIsBanned ;

        [JsonProperty("free_form_reports")]
        public bool FreeFormReports ;

        [JsonProperty("community_icon")]
        public string CommunityIcon ;

        [JsonProperty("show_media")]
        public bool ShowMedia ;

        [JsonProperty("icon_color")]
        public string IconColor ;

        [JsonProperty("user_is_muted")]
        public bool UserIsMuted ;

        [JsonProperty("display_name")]
        public string DisplayName ;

        [JsonProperty("header_img")]
        public object HeaderImg ;

        [JsonProperty("title")]
        public string Title ;

        [JsonProperty("over_18")]
        public bool Over18 ;

        [JsonProperty("icon_size")]
        public long[] IconSize ;

        [JsonProperty("primary_color")]
        public string PrimaryColor ;

        [JsonProperty("icon_img")]
        public Uri IconImg ;

        [JsonProperty("description")]
        public string Description ;

        [JsonProperty("header_size")]
        public object HeaderSize ;

        [JsonProperty("restrict_posting")]
        public bool RestrictPosting ;

        [JsonProperty("restrict_commenting")]
        public bool RestrictCommenting ;

        [JsonProperty("subscribers")]
        public long Subscribers ;

        [JsonProperty("is_default_icon")]
        public bool IsDefaultIcon ;

        [JsonProperty("link_flair_position")]
        public string LinkFlairPosition ;

        [JsonProperty("display_name_prefixed")]
        public string DisplayNamePrefixed ;

        [JsonProperty("key_color")]
        public string KeyColor ;

        [JsonProperty("name")]
        public string Name ;

        [JsonProperty("is_default_banner")]
        public bool IsDefaultBanner ;

        [JsonProperty("url")]
        public string Url ;

        [JsonProperty("banner_size")]
        public object BannerSize ;

        [JsonProperty("user_is_moderator")]
        public bool UserIsModerator ;

        [JsonProperty("public_description")]
        public string PublicDescription ;

        [JsonProperty("link_flair_enabled")]
        public bool LinkFlairEnabled ;

        [JsonProperty("subreddit_type")]
        public string SubredditType ;

        [JsonProperty("user_is_subscriber")]
        public bool UserIsSubscriber ;
    }

    public partial class UserMe
    {
        public static UserMe FromJson(string json) => JsonConvert.DeserializeObject<UserMe>(json, Reddit.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this UserMe self) => JsonConvert.SerializeObject(self, Reddit.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
